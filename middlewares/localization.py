from typing import Dict, Any
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, User
from database.models import User as DBUser
from database.db import SessionLocal

class LocalizationMiddleware(BaseMiddleware):
    def __init__(self):
        self.translations = {
            "uz": {
                "welcome": "Xush kelibsiz! üçî\n\nTilni tanlang:",
                "choose_language": "Tilni tanlang:",
                "language_set": "Til o'zbekcha qilib o'rnatildi ‚úÖ",
                "share_location": "üìç Iltimos, joylashuvingizni yuboring yoki manzilni kiriting:",
                "location_saved": "üìç Joylashuv saqlandi!",
                "main_menu": "üçî Asosiy menyu",
                "order_food": "üõí Ovqat buyurtma qilish",
                "my_orders": "üìã Mening buyurtmalarim",
                "settings": "‚öôÔ∏è Sozlamalar",
                "contact": "üìû Aloqa",
                "order_success": "‚úÖ Buyurtma muvaffaqiyatli yaratildi!\n\nBuyurtma raqami: #{order_id}",
                "payment_success": "‚úÖ To'lov muvaffaqiyatli amalga oshirildi!",
                "subscribe_channels": "Botdan foydalanish uchun quyidagi kanallarga obuna bo'ling:",
                "check_subscription": "‚úÖ Obunani tekshirish",
                "not_subscribed": "‚ùå Siz hali barcha kanallarga obuna bo'lmadingiz!"
            },
            "ru": {
                "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçî\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                "language_set": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π ‚úÖ",
                "share_location": "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
                "location_saved": "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                "main_menu": "üçî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "order_food": "üõí –ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É",
                "my_orders": "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                "contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                "order_success": "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}",
                "payment_success": "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
                "subscribe_channels": "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
                "check_subscription": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "not_subscribed": "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!"
            },
            "en": {
                "welcome": "Welcome! üçî\n\nChoose language:",
                "choose_language": "Choose language:",
                "language_set": "Language set to English ‚úÖ",
                "share_location": "üìç Please share your location or enter address:",
                "location_saved": "üìç Location saved!",
                "main_menu": "üçî Main Menu",
                "order_food": "üõí Order Food",
                "my_orders": "üìã My Orders",
                "settings": "‚öôÔ∏è Settings",
                "contact": "üìû Contact",
                "order_success": "‚úÖ Order created successfully!\n\nOrder ID: #{order_id}",
                "payment_success": "‚úÖ Payment completed successfully!",
                "subscribe_channels": "To use the bot, subscribe to the following channels:",
                "check_subscription": "‚úÖ Check Subscription",
                "not_subscribed": "‚ùå You haven't subscribed to all channels yet!"
            }
        }

    async def __call__(self, handler, event: TelegramObject, data: Dict[str, Any]):
        user: User = data.get("event_from_user")
        if user:
            db = SessionLocal()
            try:
                db_user = db.query(DBUser).filter(DBUser.telegram_id == user.id).first()
                if db_user:
                    data["lang"] = db_user.language
                    data["_"] = lambda key, **kwargs: self.translations.get(db_user.language, self.translations["uz"]).get(key, key).format(**kwargs)
                else:
                    data["lang"] = "uz"
                    data["_"] = lambda key, **kwargs: self.translations["uz"].get(key, key).format(**kwargs)
            finally:
                db.close()
        
        return await handler(event, data)
